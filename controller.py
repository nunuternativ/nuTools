import os
import cPickle, re

import pymel.all as pm
import maya.cmds as mc

from nuTools import misc
reload(misc)
from nuTools import naming
reload(naming)

DEFAULT_COLOR = 'yellow'
DEFAULT_SHAPE_TYPE = 'circle'
DEFAULT_AXIS = '+y'
DEFAULT_SCALE = 1.0
NODE_TYPE_ATTR_NAME = '_virtual_nodetype'

def availableShape():
    from pprint import pprint
    info = CurveInfo()
    pprint(info.__dict__.keys())

def drawCurve(shapeType, name):
    info = CurveInfo()
    try:
        curvePos = getattr(info, shapeType)
    except:
        mc.warning('Unknown curve shape. Using default.')
        curvePos = getattr(info, 'circle')

    kRange = range(len(curvePos))
    return mc.curve(n=name, d=1, p=curvePos)

class CurveInfo(object):
    def __init__(self):
        self.circle = [(0.00000, 0.00000, -1.00000), (-0.50000, 0.00000, -0.86603), (-0.86603, 0.00000, -0.50000), 
                        (-1.00000, 0.00000, -0.00000), (-0.86603, -0.00000, 0.50000), (-0.50000, -0.00000, 0.86603), 
                        (-0.00000, -0.00000, 1.00000), (0.50000, -0.00000, 0.86603), (0.86603, -0.00000, 0.50000), 
                        (1.00000, -0.00000, 0.00000), (0.86603, 0.00000, -0.50000), (0.50000, 0.00000, -0.86603), 
                        (0.00000, 0.00000, -1.00000)]
        
        self.square = [(1, 0, -1 ), (1,0 ,1 ), ( -1, 0, 1 ), ( -1, 0, -1 ), ( 1, 0, -1 )]
        
        self.roundSquare = [(0.00000, 0.00000, 1.00065), (-0.17227, 0.00000, 1.00065), (-0.34029, 0.00000, 0.99460), 
                        (-0.49994, 0.00000, 0.97408), (-0.64728, 0.00000, 0.95102), (-0.77867, 0.00000, 0.88322), 
                        (-0.89090, 0.00000, 0.75343), (-0.96425, 0.00000, 0.58193), (-0.98985, 0.00000, 0.39610), 
                        (-0.99933, 0.00000, 0.20052), (-1.00529, 0.00000, 0.00000), (-0.99933, -0.00000, -0.20052), 
                        (-0.98985, -0.00000, -0.39610), (-0.96425, -0.00000, -0.58193), (-0.89090, -0.00000, -0.75343), 
                        (-0.77867, -0.00000, -0.88322), (-0.64728, -0.00000, -0.95102), (-0.49994, -0.00000, -0.97408), 
                        (-0.34029, -0.00000, -0.99460), (-0.17227, -0.00000, -1.00065), (0.00000, -0.00000, -1.00065), 
                        (0.17227, -0.00000, -1.00065), (0.34029, -0.00000, -0.99460), (0.49994, -0.00000, -0.97408), 
                        (0.64728, -0.00000, -0.95102), (0.77867, -0.00000, -0.88322), (0.89090, -0.00000, -0.75343), 
                        (0.96425, -0.00000, -0.58193), (0.98985, -0.00000, -0.39610), (0.99933, -0.00000, -0.20052), 
                        (1.00529, 0.00000, 0.00000), (0.99933, 0.00000, 0.20052), (0.98985, 0.00000, 0.39610), 
                        (0.96425, 0.00000, 0.58193), (0.89090, 0.00000, 0.75343), (0.77867, 0.00000, 0.88322), 
                        (0.64728, 0.00000, 0.95102), (0.49994, 0.00000, 0.97408), (0.34029, 0.00000, 0.99460), 
                        (0.17227, 0.00000, 1.00065), (0.00000, 0.00000, 1.00065)]
        
        self.crossSquare = [(1.00000, 0.00000, 1.00000), (0.00000, 0.00000, 1.00000), (0.00000, 0.00000, 1.33000), 
                        (0.00000, 0.00000, 1.00000), (-1.00000, 0.00000, 1.00000), (-1.00000, 0.00000, 0.00000), 
                        (-1.00000, 0.00000, 0.00000), (-1.33000, 0.00000, 0.00000), (-1.00000, 0.00000, 0.00000), 
                        (-1.00000, 0.00000, -1.00000), (0.00000, 0.00000, -1.00000), (0.00000, 0.00000, -1.33000), 
                        (0.00000, 0.00000, -1.00000), (1.00000, 0.00000, -1.00000), (1.00000, 0.00000, 0.00000), 
                        (1.33000, 0.00000, 0.00000), (1.00000, 0.00000, 0.00000), (1.00000, 0.00000, 1.00000)]
        
        self.cube = [(1, 1, 1), (1, 1, -1), (-1, 1, -1),
                    (-1, 1, 1), (1, 1, 1), (1, -1, 1),
                    (-1, -1, 1), (-1, 1, 1), (1, 1, 1),
                    (1, 1, -1), (1, -1, -1), (1, -1, 1),
                    (-1, -1, 1), (-1, 1, 1), (-1, 1, -1),
                    (-1, -1, -1), (-1, -1, 1), (1, -1, 1),
                    (1, -1, -1), (-1, -1, -1)]
        self.triangleRoundArrow = [(-0.00000, 0.00000, -1.00305), (-0.04555, 0.00000, -0.99467), (-0.09110, 0.00000, -0.95750), 
                        (-1.00208, 0.00000, 0.87267), (-0.98335, 0.00000, 0.96851), (-0.91098, 0.00000, 0.98801), 
                        (-0.56462, 0.00000, 0.84439), (-0.18220, 0.00000, 0.78217), (-0.00000, 0.00000, 0.77617), 
                        (0.18220, 0.00000, 0.78217), (0.56462, 0.00000, 0.84439), (0.91098, 0.00000, 0.98801), 
                        (0.98335, 0.00000, 0.96851), (1.00208, 0.00000, 0.87267), (0.09110, 0.00000, -0.95750), 
                        (0.04555, 0.00000, -0.99467), (-0.00000, 0.00000, -1.00305)]
        self.crossCircle = [(-1.12038, 0.00000, 0.00000), (-0.99556, 0.00000, 0.00000), (-0.98330, 0.00000, -0.15574), 
                        (-0.88705, 0.00000, -0.45197), (-0.70397, 0.00000, -0.70397), (-0.45197, 0.00000, -0.88705), 
                        (-0.15574, 0.00000, -0.98330), (0.00000, 0.00000, -0.99556), (0.00000, 0.00000, -1.12038), 
                        (0.00000, 0.00000, -0.99556), (0.15574, 0.00000, -0.98330), (0.45197, 0.00000, -0.88705), 
                        (0.70397, 0.00000, -0.70397), (0.88705, 0.00000, -0.45197), (0.98330, 0.00000, -0.15574), 
                        (0.99556, 0.00000, 0.00000), (1.12038, 0.00000, 0.00000), (0.99556, 0.00000, 0.00000), 
                        (0.98330, 0.00000, 0.15574), (0.88705, 0.00000, 0.45197), (0.70397, 0.00000, 0.70397), 
                        (0.45197, 0.00000, 0.88705), (0.15574, 0.00000, 0.98330), (0.00000, 0.00000, 0.99556), 
                        (0.00000, 0.00000, 1.12038), (0.00000, 0.00000, 0.99556), (-0.15574, 0.00000, 0.98330), 
                        (-0.45197, 0.00000, 0.88705), (-0.70397, 0.00000, 0.70397), (-0.88705, 0.00000, 0.45197), 
                        (-0.98330, 0.00000, 0.15574), (-0.99556, 0.00000, 0.00000), (-1.12038, 0.00000, 0.00000), 
                        (-0.99556, 0.00000, 0.00000)]
        
        self.triangle = [(-1.00000, -0.50000, 0.00000), (1.00000, -0.50000, 0.00000), (0.00000, 1.00000, 0.00000), 
                        (-1.00000, -0.50000, 0.00000)]
        
        self.sphere = [(0.00000, 1.00000, 0.00000), (0.00000, 0.92388, 0.38268), (0.00000, 0.70711, 0.70711), 
                    (0.00000, 0.38268, 0.92388), (0.00000, 0.00000, 1.00000), (0.00000, -0.38268, 0.92388), 
                    (0.00000, -0.70711, 0.70711), (0.00000, -0.92388, 0.38268), (0.00000, -1.00000, 0.00000), 
                    (0.00000, -0.92388, -0.38268), (0.00000, -0.70711, -0.70711), (0.00000, -0.38268, -0.92388), 
                    (0.00000, 0.00000, -1.00000), (0.00000, 0.38268, -0.92388), (0.00000, 0.70711, -0.70711), 
                    (0.00000, 0.92388, -0.38268), (0.00000, 1.00000, 0.00000), (0.38268, 0.92388, 0.00000), 
                    (0.70711, 0.70711, 0.00000), (0.92388, 0.38268, 0.00000), (1.00000, 0.00000, 0.00000), 
                    (0.92388, -0.38268, 0.00000), (0.70711, -0.70711, 0.00000), (0.38268, -0.92388, 0.00000), 
                    (0.00000, -1.00000, 0.00000), (-0.38268, -0.92388, 0.00000), (-0.70711, -0.70711, 0.00000), 
                    (-0.92388, -0.38268, 0.00000), (-1.00000, 0.00000, 0.00000), (-0.92388, 0.38268, 0.00000), 
                    (-0.70711, 0.70711, 0.00000), (-0.38268, 0.92388, 0.00000), (0.00000, 1.00000, 0.00000), 
                    (0.00000, 0.92388, -0.38268), (0.00000, 0.70711, -0.70711), (0.00000, 0.38268, -0.92388), 
                    (0.00000, 0.00000, -1.00000), (-0.38268, 0.00000, -0.92388), (-0.70711, 0.00000, -0.70711), 
                    (-0.92388, 0.00000, -0.38268), (-1.00000, 0.00000, 0.00000), (-0.92388, 0.00000, 0.38268), 
                    (-0.70711, 0.00000, 0.70711), (-0.38268, 0.00000, 0.92388), (0.00000, 0.00000, 1.00000), 
                    (0.38268, 0.00000, 0.92388), (0.70711, 0.00000, 0.70711), (0.92388, 0.00000, 0.38268), 
                    (1.00000, 0.00000, 0.00000), (0.92388, 0.00000, -0.38268), (0.70711, 0.00000, -0.70711), 
                    (0.38268, 0.00000, -0.92388), (0.00000, 0.00000, -1.00000)]
        
        self.crossSphere = [( 1.5, 0, 0 ), ( 1.008845, 0, 1.04915e-007 ), ( 0.98229, 0, 0.224239 ), ( 0.907242, 0, 0.436868 ), ( 0.788415, 0, 0.628748 ), ( 0.628748, 0, 0.788415 ),
                        ( 0.436868, 0, 0.907242 ), ( 0.22424, 0, 0.98229 ), ( 0, 0, 1.008845 ), ( 0, 0, 1.5 ), ( 0, 0, 1.008845 ), ( -0.22424, 0, 0.98229 ), ( -0.436868, 0, 0.907242 ), 
                        ( -0.628748, 0, 0.788415 ),( -0.788415, 0, 0.628748 ), ( -0.907242, 0, 0.436868 ), ( -0.98229, 0, 0.224239 ), ( -1.008845, 0, 1.04915e-007 ), ( -1.5, 0, 0 ), 
                        ( -1.008845, 0, 1.04915e-007 ),( -0.98229, 0, -0.22424 ), ( -0.907242, 0, -0.436868 ), ( -0.788415, 0, -0.628748 ), ( -0.628748, 0, -0.788413 ), ( -0.436868, 0, -0.907244 ), 
                        ( -0.22424, 0, -0.982285 ), ( 0, 0, -1.008857 ), ( 0, 0, -1.5 ), ( 0, 0, -1.008857 ), ( 0.22424, 0, -0.982285 ), ( 0.436868, 0, -0.907244 ), ( 0.628748, 0, -0.788413 ), 
                        ( 0.788415, 0, -0.628748 ),( 0.907242, 0, -0.436868 ), ( 0.98229, 0, -0.22424 ), ( 1.008845, 0, 1.04915e-007 ), ( 1.5, 0, 0 ), ( 1.5, 0, 0 ), ( 1.008845, 0, 1.04915e-007 ), 
                        ( 0.98229, 0, 0.224239 ), ( 0.907242, 0, 0.436868 ), ( 0.788415, 0, 0.628748 ), ( 0.628748, 0, 0.788415 ), ( 0.436868, 0, 0.907242 ), ( 0.22424, 0, 0.98229 ), ( 0, 0, 1.008845 ), 
                        ( 0, 0.224157, 0.982012 ),( 0, 0.437006, 0.90749 ), ( 0, 0.628662, 0.788325 ), ( 0, 0.788322, 0.628664 ), ( 0, 0.907489, 0.437009 ), ( 0, 0.982011, 0.224161 ), ( -0.00327644, 1.008396, 0 ), 
                        ( 0, 1.5, 0 ), ( -0.00327644, 1.008396, 0 ), ( 0.221274, 0.983201, 0 ), ( 0.434601, 0.908997, 0 ), ( 0.626593, 0.789876, 0 ), ( 0.786794, 0.630602, 0 ), ( 0.906808, 0.438992, 0 ),
                        ( 0.98208, 0.226423, 0 ), ( 1.008845, 0, 1.04915e-007 ), ( 0.982872, -0.221876, 0 ), ( 0.908311, -0.437653, 0 ), ( 0.788973, -0.624677, 0 ), ( 0.629329, -0.793566, 0 ),
                        ( 0.43772, -0.896831, 0 ), ( 0.22467, -0.999584, 0 ), ( 0, -1.009107, 3.6819e-006 ), ( 0, -1.5, 0 ), ( 0.000940454, -1.000208, 0 ), ( -0.228431, -0.999584, 0 ),
                        ( -0.42633, -0.906895, 0 ), ( -0.626779, -0.791604, 0 ), ( -0.783719, -0.63355, 0 ), ( -0.90602, -0.441444, 0 ), ( -0.981105, -0.229405, 0 ), ( -1.008525, -0.00467176, 0 ),
                        ( -0.983478, 0.219707, 0 ), ( -0.909673, 0.433257, 0 ), ( -0.790841, 0.625368, 0 ), ( -0.631739, 0.785848, 0 ), ( -0.440502, 0.906138, 0 ), ( -0.227662, 0.981729, 0 ),
                        ( -0.00327644, 1.008396, 0 ), ( 0, 0.982012, -0.224154 ), ( 0, 0.907491, -0.437002 ), ( 0, 0.788331, -0.628661 ), ( 0, 0.628658, -0.788313 ), ( 0, 0.628658, -0.788313 ),
                        ( 0, 0.628658, -0.788313 ), ( 0, 0.437022, -0.907494 ), ( 0, 0.224162, -0.98203 ), ( 0, 0, -1.008857 ), ( 0, -0.224162, -0.98203 ), ( 0, -0.437022, -0.907494 ),
                        ( 0, -0.628658, -0.788313 ), ( 0, -0.788331, -0.628661 ), ( 0, -0.907491, -0.437002 ), ( 0, -0.982012, -0.224154 ), ( 0.000940454, -1.000208, 0 ), ( 0, -1.5, 0 ),
                        ( 0, -1.009107, 3.6819e-006 ), ( 0, -0.982011, 0.224161 ), ( 0, -0.907489, 0.437009 ), ( 0, -0.788322, 0.628664 ), ( 0, -0.628662, 0.788325 ), ( 0, -0.437006, 0.90749 ),
                        ( 0, -0.224157, 0.982012 ), ( 0, 0, 1.008845 ), ( 0, 0.224157, 0.982012 ), ( 0, 0.437006, 0.90749 ), ( 0, 0.628662, 0.788325 ), ( 0, 0.788322, 0.628664 ),
                        ( 0, 0.907489, 0.437009 ), ( 0, 0.982011, 0.224161 ), ( -0.00327644, 1.008396, 0)]
        
        self.cylinder = [(0.00000, 1.00226, 1.01214), (-0.25801, 0.96724, 1.01214), (-0.49856, 0.86717, 1.01214), 
                        (-0.70567, 0.70871, 1.01214), (-0.86345, 0.50071, 1.01214), (-0.96309, 0.25913, 1.01214), 
                        (-0.99797, 0.00000, 1.01214), (-0.99797, 0.00000, -1.01244), (-0.99797, 0.00000, 1.01214), 
                        (-0.96309, -0.25912, 1.01214), (-0.86345, -0.50071, 1.01214), (-0.70567, -0.70870, 1.01214), 
                        (-0.49856, -0.86716, 1.01214), (-0.25801, -0.96723, 1.01214), (0.00000, -1.00226, 1.01214), 
                        (0.00000, -1.00226, -1.01244), (0.00000, -1.00226, 1.01214), (0.25801, -0.96723, 1.01214), 
                        (0.49856, -0.86716, 1.01214), (0.70567, -0.70871, 1.01214), (0.86345, -0.50071, 1.01214), 
                        (0.96309, -0.25912, 1.01214), (0.99797, 0.00000, 1.01214), (0.99797, 0.00000, -1.01244), 
                        (0.99797, 0.00000, 1.01214), (0.96309, 0.25913, 1.01214), (0.86345, 0.50071, 1.01214), 
                        (0.70567, 0.70871, 1.01214), (0.49856, 0.86717, 1.01214), (0.25801, 0.96724, 1.01214), 
                        (0.00000, 1.00226, 1.01214), (0.00000, 1.00226, -1.01244), (-0.25801, 0.96724, -1.01244), 
                        (-0.49856, 0.86717, -1.01244), (-0.70567, 0.70871, -1.01244), (-0.86345, 0.50071, -1.01244), 
                        (-0.96309, 0.25913, -1.01244), (-0.99797, 0.00000, -1.01244), (-0.96309, -0.25912, -1.01244), 
                        (-0.86345, -0.50071, -1.01244), (-0.70567, -0.70870, -1.01244), (-0.49856, -0.86716, -1.01244), 
                        (-0.25801, -0.96723, -1.01244), (0.00000, -1.00226, -1.01244), (0.25801, -0.96723, -1.01244), 
                        (0.49856, -0.86716, -1.01244), (0.70567, -0.70871, -1.01244), (0.86345, -0.50071, -1.01244), 
                        (0.96309, -0.25912, -1.01244), (0.99797, 0.00000, -1.01244), (0.96309, 0.25913, -1.01244), 
                        (0.86345, 0.50071, -1.01244), (0.70567, 0.70871, -1.01244), (0.49856, 0.86717, -1.01244), 
                        (0.25801, 0.96724, -1.01244), (0.00000, 1.00226, -1.01244)]
        
        self.crossOval = [(0.00606, 0.00000, -1.41695), (0.01031, 0.00000, -1.29805), (0.14265, 0.00000, -1.29335), 
                        (0.42794, 0.00000, -1.15070), (0.71323, 0.00000, -0.86541), (0.85588, 0.00000, -0.43747), 
                        (0.85588, 0.00000, -0.00952), (0.99853, 0.00000, -0.00952), (0.85588, 0.00000, -0.00952), 
                        (0.85588, 0.00000, 0.41842), (0.71323, 0.00000, 0.84636), (0.42794, 0.00000, 1.13165), 
                        (0.14265, 0.00000, 1.27430), (0.00000, 0.00000, 1.27430), (0.00000, 0.00000, 1.41695), 
                        (0.00000, 0.00000, 1.27430), (-0.14265, 0.00000, 1.27430), (-0.42794, 0.00000, 1.13165), 
                        (-0.71323, 0.00000, 0.84636), (-0.85588, 0.00000, 0.41842), (-0.85588, 0.00000, -0.00952), 
                        (-0.99853, 0.00000, -0.00952), (-0.85588, 0.00000, -0.00952), (-0.85588, 0.00000, -0.43747), 
                        (-0.71323, 0.00000, -0.86541), (-0.42794, 0.00000, -1.15070), (-0.14265, 0.00000, -1.29335), 
                        (0.00000, 0.00000, -1.29335)]
        
        self.locator = [(0,1,0), (0,-1,0), (0,0,0), (1,0,0), (-1,0,0), (0,0,0), (0,0,1), (0,0,-1)]
        
        self.arrow270 = [(-0.00075, 0.00000, -0.74800), (-0.00075, 0.00000, -0.99734), (0.25710, 0.00000, -0.96249), 
                    (0.49750, 0.00000, -0.86291), (0.70448, 0.00000, -0.70523), (0.86216, 0.00000, -0.49825), 
                    (0.96174, 0.00000, -0.25785), (0.99659, 0.00000, 0.00000), (0.96174, 0.00000, 0.25785), 
                    (0.86216, 0.00000, 0.49825), (0.70448, 0.00000, 0.70523), (0.49750, 0.00000, 0.86291), 
                    (0.25710, 0.00000, 0.96249), (-0.00075, 0.00000, 0.99735), (-0.25861, 0.00000, 0.96249), 
                    (-0.49901, 0.00000, 0.86291), (-0.70598, 0.00000, 0.70523), (-0.86367, 0.00000, 0.49825), 
                    (-0.96324, 0.00000, 0.25785), (-0.99810, 0.00000, 0.00000), (-1.26207, 0.00000, 0.00000), 
                    (-0.86834, 0.00000, -0.78747), (-0.47461, 0.00000, 0.00000), (-0.74876, 0.00000, 0.00000), 
                    (-0.72262, 0.00000, 0.19339), (-0.64794, 0.00000, 0.37369), (-0.52968, 0.00000, 0.52892), 
                    (-0.37444, 0.00000, 0.64719), (-0.19414, 0.00000, 0.72187), (-0.00075, 0.00000, 0.74801), 
                    (0.19264, 0.00000, 0.72187), (0.37294, 0.00000, 0.64719), (0.52817, 0.00000, 0.52892), 
                    (0.64643, 0.00000, 0.37369), (0.72112, 0.00000, 0.19339), (0.74726, 0.00000, 0.00000), 
                    (0.72112, 0.00000, -0.19339), (0.64643, 0.00000, -0.37369), (0.52817, 0.00000, -0.52892), 
                    (0.37294, 0.00000, -0.64719), (0.19264, 0.00000, -0.72187), (-0.00075, 0.00000, -0.74800)]
        
        self.sideToSideMidArrow = [(-1.00361, 0.00000, 0.00000), (-0.60216, 0.00000, -0.40144), (-0.60216, 0.00000, -0.20072), 
                                (0.60216, 0.00000, -0.20072), (0.60216, 0.00000, -0.40144), (1.00361, 0.00000, 0.00000), 
                                (0.60216, 0.00000, 0.40144), (0.60216, 0.00000, 0.20072), (-0.60216, 0.00000, 0.20072), 
                                (-0.60216, 0.00000, 0.40144), (-1.00361, 0.00000, 0.00000)]

        self.oneDirectionFatArrow = [(-0.5, 0.00000, -1), (0.5, 0.00000, -1), (0.5, 0.00000, 0.00000), 
                                    (1, 0.00000, 0.00000), (0.00000, 0.00000, 1), (-1, 0.00000, 0.00000), 
                                    (-0.5, 0.00000, 0.00000), (-0.5, 0.00000, -1)]

        self.directionalSquare = [(0.00000, 0.00000, 0.99853), (0.24963, 0.00000, 0.74890), (-0.24963, 0.00000, 0.74890), 
                                (0.00000, 0.00000, 0.99853), (0.99853, 0.00000, 0.00000), (0.74890, 0.00000, -0.24963), 
                                (0.74890, 0.00000, 0.24963), (0.99853, 0.00000, 0.00000), (0.00000, 0.00000, -0.99853), 
                                (-0.24963, 0.00000, -0.74890), (0.24963, 0.00000, -0.74890), (0.00000, 0.00000, -0.99853), 
                                (-0.99853, 0.00000, 0.00000), (-0.74890, 0.00000, 0.24963), (-0.74890, 0.00000, -0.24963), 
                                (-0.99853, 0.00000, 0.00000), (0.00000, 0.00000, 0.99853)]
        
        self.squareStick = [(0.00000, 0.79936, 0.00000), (-0.10013, 0.79936, 0.00000), (-0.10013, 0.99961, 0.00000), 
                            (0.10013, 0.99961, 0.00000), (0.10013, 0.79936, 0.00000), (0.00000, 0.79936, 0.00000), 
                            (0.00000, 0.00000, 0.00000)]

        self.skull = [(0.00000, 1.09754, 0.00000), (0.00000, 0.99823, 0.00000), (0.24931, 0.94430, 0.00000), 
                    (0.56648, 0.74892, 0.00000), (0.74793, 0.25030, 0.00000), (0.84724, 0.25030, 0.00000), 
                    (0.74793, 0.25030, 0.00000), (0.61358, -0.24831, 0.00000), (0.24931, -0.74693, 0.00000), 
                    (0.00000, -0.74693, 0.00000), (0.00000, -0.84624, 0.00000), (0.00000, -0.74693, 0.00000), 
                    (-0.24931, -0.74693, 0.00000), (-0.61358, -0.24831, 0.00000), (-0.74793, 0.25030, 0.00000), 
                    (-0.84724, 0.25030, 0.00000), (-0.74793, 0.25030, 0.00000), (-0.56648, 0.74892, 0.00000), 
                    (-0.24931, 0.94430, 0.00000), (0.00000, 0.99823, 0.00000)]

        self.hristCross = [(-0.03568, 0.82049, 0.00000), (-0.03568, 0.00143, 0.00000), (0.03568, 0.00143, 0.00000), 
                        (0.03568, 0.82049, 0.00000), (0.12445, 0.82049, 0.00000), (0.12445, 0.89185, 0.00000), 
                        (0.03568, 0.89185, 0.00000), (0.03568, 1.00000, 0.00000), (-0.03568, 1.00000, 0.00000), 
                        (-0.03568, 0.89185, 0.00000), (-0.12445, 0.89185, 0.00000), (-0.12445, 0.82049, 0.00000), 
                        (-0.03568, 0.82049, 0.00000)]

        self.crowbar = [(0.03568, 0.00143, 0.00000), (-0.03568, 0.00143, 0.00000), (-0.03568, 0.92875, 0.00000), 
                        (-0.03568, 1.00011, 0.00000), (0.03568, 1.00011, 0.00000), (0.12445, 1.00011, 0.00000), 
                        (0.12445, 0.92875, 0.00000), (0.03568, 0.92875, 0.00000), (0.03568, 0.00143, 0.00000)]

        self.keyHole = [(-0.02872, 0.78150, 0.00000), (-0.05550, 0.79259, 0.00000), (-0.07855, 0.81016, 0.00000), 
                        (-0.09612, 0.83321, 0.00000), (-0.10721, 0.85999, 0.00000), (-0.11109, 0.88871, 0.00000), 
                        (-0.10721, 0.91743, 0.00000), (-0.09612, 0.94420, 0.00000), (-0.07855, 0.96726, 0.00000), 
                        (-0.05550, 0.98482, 0.00000), (-0.02872, 0.99591, 0.00000), (0.00000, 0.99980, 0.00000), 
                        (0.02872, 0.99591, 0.00000), (0.05550, 0.98482, 0.00000), (0.07855, 0.96726, 0.00000), 
                        (0.09612, 0.94420, 0.00000), (0.10721, 0.91743, 0.00000), (0.11109, 0.88871, 0.00000), 
                        (0.10721, 0.85999, 0.00000), (0.09612, 0.83321, 0.00000), (0.07855, 0.81016, 0.00000), 
                        (0.05550, 0.79259, 0.00000), (0.02872, 0.78150, 0.00000), (0.02872, 0.00000, 0.00000), 
                        (-0.02872, 0.00000, 0.00000), (-0.02872, 0.78150, 0.00000)]
            
        self.stick = [(0.00000, 0.77762, -0.00000), (-0.02872, 0.78150, -0.00000), (-0.05550, 0.79259, -0.00000), 
                    (-0.07855, 0.81016, -0.00000), (-0.09612, 0.83321, -0.00000), (-0.10721, 0.85999, -0.00000), 
                    (-0.11109, 0.88871, -0.00000), (-0.10721, 0.91743, -0.00000), (-0.09612, 0.94420, -0.00000), 
                    (-0.07855, 0.96726, -0.00000), (-0.05550, 0.98482, -0.00000), (-0.02872, 0.99591, -0.00000), 
                    (0.00000, 0.99980, -0.00000), (0.02872, 0.99591, -0.00000), (0.05550, 0.98482, -0.00000), 
                    (0.07855, 0.96726, -0.00000), (0.09612, 0.94420, -0.00000), (0.10721, 0.91743, -0.00000), 
                    (0.11109, 0.88871, -0.00000), (0.10721, 0.85999, -0.00000), (0.09612, 0.83321, -0.00000), 
                    (0.07855, 0.81016, -0.00000), (0.05550, 0.79259, -0.00000), (0.02872, 0.78150, -0.00000), 
                    (0.00000, 0.77762, -0.00000), (0.00000, 0.00000, 0.00000)]

        self.doubleStick = [(0.00000, 0.77762, 0.00000), (-0.02872, 0.78150, 0.00000), (-0.05550, 0.79259, 0.00000), 
                            (-0.07855, 0.81016, 0.00000), (-0.09612, 0.83321, 0.00000), (-0.10721, 0.85999, 0.00000), 
                            (-0.11109, 0.88871, 0.00000), (-0.10721, 0.91743, 0.00000), (-0.09612, 0.94420, 0.00000), 
                            (-0.07855, 0.96726, 0.00000), (-0.05550, 0.98482, 0.00000), (-0.02872, 0.99591, 0.00000), 
                            (0.00000, 0.99980, 0.00000), (0.02872, 0.99591, 0.00000), (0.05550, 0.98482, 0.00000), 
                            (0.07855, 0.96726, 0.00000), (0.09612, 0.94420, 0.00000), (0.10721, 0.91743, 0.00000), 
                            (0.11109, 0.88871, 0.00000), (0.10721, 0.85999, 0.00000), (0.09612, 0.83321, 0.00000), 
                            (0.07855, 0.81016, 0.00000), (0.05550, 0.79259, 0.00000), (0.02872, 0.78150, 0.00000), 
                            (0.00000, 0.77762, 0.00000), (0.00000, 0.00000, 0.00000), (-0.00000, -0.77762, 0.00000), 
                            (-0.02872, -0.78150, 0.00000), (-0.05550, -0.79259, 0.00000), (-0.07855, -0.81016, 0.00000), 
                            (-0.09612, -0.83321, 0.00000), (-0.10721, -0.85999, 0.00000), (-0.11109, -0.88871, 0.00000), 
                            (-0.10721, -0.91743, 0.00000), (-0.09612, -0.94420, 0.00000), (-0.07855, -0.96726, 0.00000), 
                            (-0.05550, -0.98482, 0.00000), (-0.02872, -0.99591, 0.00000), (-0.00000, -0.99980, 0.00000), 
                            (0.02872, -0.99591, 0.00000), (0.05550, -0.98482, 0.00000), (0.07855, -0.96726, 0.00000), 
                            (0.09612, -0.94420, 0.00000), (0.10721, -0.91743, 0.00000), (0.11109, -0.88871, 0.00000), 
                            (0.10721, -0.85999, 0.00000), (0.09612, -0.83321, 0.00000), (0.07855, -0.81016, 0.00000), 
                            (0.05550, -0.79259, 0.00000), (0.02872, -0.78150, 0.00000), (-0.00000, -0.77762, 0.00000)]
        
        self.doubleSquareStick = [(0.00000, 0.79936, 0.00000), (-0.10013, 0.79936, 0.00000), (-0.10013, 0.99961, 0.00000), 
                                (0.10013, 0.99961, 0.00000), (0.10013, 0.79936, 0.00000), (0.00000, 0.79936, 0.00000), 
                                (0.00000, 0.00000, 0.00000), (0.00000, -0.79936, 0.00000), (-0.10013, -0.79936, 0.00000), 
                                (-0.10013, -0.99962, 0.00000), (0.10013, -0.99962, 0.00000), (0.10013, -0.79936, 0.00000), 
                                (0.00000, -0.79936, 0.00000)]

        self.negStick = [(-0.77762, 0.00000, -0.00000), (-0.78150, 0.00000, 0.02872), (-0.79259, 0.00000, 0.05550), 
                        (-0.81016, 0.00000, 0.07855), (-0.83321, 0.00000, 0.09612), (-0.85999, 0.00000, 0.10721), 
                        (-0.88871, 0.00000, 0.11109), (-0.91743, 0.00000, 0.10721), (-0.94420, 0.00000, 0.09612), 
                        (-0.96726, 0.00000, 0.07855), (-0.98482, 0.00000, 0.05550), (-0.99591, 0.00000, 0.02872), 
                        (-0.99980, 0.00000, -0.00000), (-0.99591, 0.00000, -0.02872), (-0.98482, 0.00000, -0.05550), 
                        (-0.96726, 0.00000, -0.07855), (-0.94420, 0.00000, -0.09612), (-0.91743, 0.00000, -0.10721), 
                        (-0.88871, 0.00000, -0.11109), (-0.85999, 0.00000, -0.10721), (-0.83321, 0.00000, -0.09612), 
                        (-0.81016, 0.00000, -0.07855), (-0.79259, 0.00000, -0.05550), (-0.78150, 0.00000, -0.02872), 
                        (-0.77762, 0.00000, -0.00000), (0.00000, 0.00000, 0.00000)]
        
        self.posStick = [(0.77762, 0.00000, 0.00000), (0.78150, 0.00000, -0.02872), (0.79259, 0.00000, -0.05550), 
                        (0.81016, 0.00000, -0.07855), (0.83321, 0.00000, -0.09612), (0.85999, 0.00000, -0.10721), 
                        (0.88871, 0.00000, -0.11109), (0.91743, 0.00000, -0.10721), (0.94420, 0.00000, -0.09612), 
                        (0.96726, 0.00000, -0.07855), (0.98482, 0.00000, -0.05550), (0.99591, 0.00000, -0.02872), 
                        (0.99980, 0.00000, 0.00000), (0.99591, 0.00000, 0.02872), (0.98482, 0.00000, 0.05550), 
                        (0.96726, 0.00000, 0.07855), (0.94420, 0.00000, 0.09612), (0.91743, 0.00000, 0.10721), 
                        (0.88871, 0.00000, 0.11109), (0.85999, 0.00000, 0.10721), (0.83321, 0.00000, 0.09612), 
                        (0.81016, 0.00000, 0.07855), (0.79259, 0.00000, 0.05550), (0.78150, 0.00000, 0.02872), 
                        (0.77762, 0.00000, 0.00000), (0.00000, 0.00000, 0.00000)]
        
        self.arrowStick = [(0.00000, -0.00000, -1.49418), (-0.24900, -0.00000, -1.49418), (0.00000, -0.00000, -1.99217), 
                        (0.24900, -0.00000, -1.49418), (0.00000, -0.00000, -1.49418), (0.00000, -0.00000, -0.24919), 
                        (0.06438, -0.00000, -0.24049), (0.12439, -0.00000, -0.21563), (0.17607, -0.00000, -0.17627), 
                        (0.21544, -0.00000, -0.12459), (0.24030, -0.00000, -0.06457), (0.24900, -0.00000, -0.00020), 
                        (0.24030, 0.00000, 0.06418), (0.21544, 0.00000, 0.12420), (0.17607, 0.00000, 0.17587), 
                        (0.12439, 0.00000, 0.21524), (0.06438, 0.00000, 0.24010), (0.00000, 0.00000, 0.24880), 
                        (-0.06438, 0.00000, 0.24010), (-0.12439, 0.00000, 0.21524), (-0.17607, 0.00000, 0.17587), 
                        (-0.21544, 0.00000, 0.12420), (-0.24030, 0.00000, 0.06418), (-0.24900, -0.00000, -0.00020), 
                        (-0.24030, -0.00000, -0.06457), (-0.21544, -0.00000, -0.12459), (-0.17607, -0.00000, -0.17627), 
                        (-0.12439, -0.00000, -0.21563), (-0.06438, -0.00000, -0.24049), (0.00000, -0.00000, -0.24919)]

        self.rightFatArrow = [(0.00000, 0.00000, -0.50000), (1.50000, 0.00000, -0.50000), (1.50000, 0.00000, -1.00000), 
                            (2.50000, 0.00000, 0.00000), (1.50000, 0.00000, 1.00000), (1.50000, 0.00000, 0.50000), 
                            (0.00000, 0.00000, 0.50000), (0.00000, 0.00000, -0.50000)]

        self.roundCrnrRec = [(0.00000, -0.00000, -0.22407), (0.72921, -0.00000, -0.22407), (0.86179, -0.00000, -0.22393), 
                            (0.93713, -0.00000, -0.19707), (0.97973, -0.00000, -0.15878), (1.00103, -0.00000, -0.10773), 
                            (1.00103, 0.00000, 0.10856), (0.97973, 0.00000, 0.15961), (0.93713, 0.00000, 0.19789), 
                            (0.86179, 0.00000, 0.22331), (0.72921, 0.00000, 0.22351), (-0.72921, 0.00000, 0.22351), 
                            (-0.86179, 0.00000, 0.22331), (-0.93713, 0.00000, 0.19789), (-0.97973, 0.00000, 0.15961), 
                            (-1.00103, 0.00000, 0.10856), (-1.00103, -0.00000, -0.10773), (-0.97973, -0.00000, -0.15878), 
                            (-0.93713, -0.00000, -0.19707), (-0.86179, -0.00000, -0.22393), (-0.72921, -0.00000, -0.22407), 
                            (0.00000, -0.00000, -0.22407)]

        self.fatArrowRectangle = [(-1.00000, 0.00000, -1.00000), (1.00000, 0.00000, -1.00000), 
                                (1.00000, 0.00000, 0.50000), (0.00000, 0.00000, 1.25), 
                                (-1.00000, 0.00000, 0.50000), (-1.00000, 0.00000, -1.00000)]

        self.browShape = [(-1.00000, 0.00000, 0.27052), (-0.95854, 0.00000, 0.34034), (-0.90083, 0.00000, 0.35168), 
                        (-0.70077, 0.00000, 0.27523), (-0.49619, 0.00000, 0.21376), (-0.19356, 0.00000, 0.15843), 
                        (0.19356, 0.00000, 0.15843), (0.49619, 0.00000, 0.21376), (0.70077, 0.00000, 0.27523), 
                        (0.90083, 0.00000, 0.35168), (0.95854, 0.00000, 0.34034), (1.00000, 0.00000, 0.27052), 
                        (1.00340, 0.00000, 0.17831), (0.98161, 0.00000, 0.08750), (0.86642, -0.00000, -0.02587), 
                        (0.73470, -0.00000, -0.13326), (0.56359, -0.00000, -0.23828), (0.41384, -0.00000, -0.29971), 
                        (0.20312, -0.00000, -0.34517), (-0.20312, -0.00000, -0.34517), (-0.41384, -0.00000, -0.29971), 
                        (-0.56359, -0.00000, -0.23828), (-0.73470, -0.00000, -0.13326), (-0.86642, -0.00000, -0.02587), 
                        (-0.98161, 0.00000, 0.08750), (-1.00340, 0.00000, 0.17831), (-1.00000, 0.00000, 0.27052)]

        self.diamond = [(-0.1, 0.00000, -1.00000), (0.1, 0.00000, -1.00000), (1.00000, 0.00000, -0.1), 
                        (1.00000, 0.00000, 0.1), (0.1, 0.00000, 1.00000), (-0.1, 0.00000, 1.00000), 
                        (-1.00000, 0.00000, 0.1), (-1.00000, 0.00000, -0.1), (-0.1, 0.00000, -1.00000)]

        self.crossDiamond = [(-0.50689, 0.00000, -0.16896), (-0.16896, 0.00000, -0.50689), (-0.15000, 0.00000, -1.00000), 
                            (0.15000, 0.00000, -1.00000), (0.16896, 0.00000, -0.50689), (0.50689, 0.00000, -0.16896), 
                            (1.00000, 0.00000, -0.15000), (1.00000, 0.00000, 0.15000), (0.50689, 0.00000, 0.16896), 
                            (0.16896, 0.00000, 0.50689), (0.15000, 0.00000, 1.00000), (-0.15000, 0.00000, 1.00000), 
                            (-0.16896, 0.00000, 0.50689), (-0.50689, 0.00000, 0.16896), (-1.00000, 0.00000, 0.15000), 
                            (-1.00000, 0.00000, -0.15000), (-0.50689, 0.00000, -0.16896)]

        self.flatDiamond = [(-0.04500, 0.00000, -0.35000), (0.04500, 0.00000, -0.35000), (1.00000, 0.00000, -0.03500), 
                            (1.00000, 0.00000, 0.03500), (0.04500, 0.00000, 0.35000), (-0.04500, 0.00000, 0.35000), 
                            (-1.00000, 0.00000, 0.03500), (-1.00000, 0.00000, -0.03500), (-0.04500, 0.00000, -0.35000)]

        self.diamond3d = [(0.00000, 0.00000, -1.0000), (-1.0000, 0.00000, 0.00000), (0.00000, 0.00000, 1.0000), 
                        (1.0000, 0.00000, 0.00000), (0.00000, 0.00000, -1.0000), (0.00000, 1.0000, 0.00000), 
                        (0.00000, 0.00000, 1.0000), (0.00000, -1.0000, 0.00000), (0.00000, 0.00000, -1.0000), 
                        (1.0000, 0.00000, 0.00000), (0.00000, 1.0000, 0.00000), (-1.0000, 0.00000, 0.00000), 
                        (0.00000, -1.0000, 0.00000), (1.0000, 0.00000, 0.00000)]

        self.halfCircle = [(0.00000, -0.00000, 0.50000), (-0.38268, -0.00000, 0.42388), (-0.70711, -0.00000, 0.20711), 
                        (-0.92388, -0.00000, -0.11732), (-1.00000, -0.00000, -0.50000), (-0.70711, 0.00000, -0.50000), 
                        (-0.38268, 0.00000, -0.50000), (0.00000, 0.00000, -0.50000), (0.38268, 0.00000, -0.50000), 
                        (0.70711, 0.00000, -0.50000), (1.00000, 0.00000, -0.50000), (0.92388, -0.00000, -0.11732), 
                        (0.70711, -0.00000, 0.20711), (0.38268, -0.00000, 0.42388), (0.00000, -0.00000, 0.50000)]

        self.halfCrossCircle = [(-0.00177, 0.00000, 1.21585), (0.00000, 0.00000, 1.00000), (-0.38268, 0.00000, 0.92388), 
                                (-0.70711, -0.00000, 0.70711), (-0.92388, 0.00000, 0.38268), (-1.00000, 0.00000, 0.00000), 
                                (-1.21762, 0.00000, 0.00000), (-1.00000, 0.00000, 0.00000), (-0.92388, 0.00000, -0.38268), 
                                (-0.70711, -0.00000, -0.70711), (-0.38268, 0.00000, -0.92388), (0.00000, 0.00000, -1.00000), 
                                (-0.00177, 0.00000, -1.21585)]

        self.roundCenterDirectionalArrow = [(0.00000, 0.00000, -0.99422), (-0.37117, 0.00000, -0.66282), (-0.20288, 0.00000, -0.66282), 
                                            (-0.20288, 0.00000, -0.45242), (-0.24088, 0.00000, -0.43816), (-0.26792, 0.00000, -0.42217), 
                                            (-0.29390, 0.00000, -0.40451), (-0.31871, 0.00000, -0.38526), (-0.34228, 0.00000, -0.36449), 
                                            (-0.36449, 0.00000, -0.34228), (-0.38526, 0.00000, -0.31871), (-0.40451, 0.00000, -0.29390), 
                                            (-0.42217, 0.00000, -0.26792), (-0.43816, 0.00000, -0.24088), (-0.45242, 0.00000, -0.20288), 
                                            (-0.66282, 0.00000, -0.20288), (-0.66282, 0.00000, -0.37117), (-0.99422, 0.00000, 0.00000), 
                                            (-0.66282, 0.00000, 0.37117), (-0.66282, 0.00000, 0.20288), (-0.45242, 0.00000, 0.20288), 
                                            (-0.43816, 0.00000, 0.24088), (-0.42217, 0.00000, 0.26792), (-0.40451, 0.00000, 0.29390), 
                                            (-0.38526, 0.00000, 0.31871), (-0.36449, 0.00000, 0.34228), (-0.34228, 0.00000, 0.36449), 
                                            (-0.31871, 0.00000, 0.38526), (-0.29390, 0.00000, 0.40451), (-0.26792, 0.00000, 0.42217), 
                                            (-0.24088, 0.00000, 0.43816), (-0.20288, 0.00000, 0.45242), (-0.20288, 0.00000, 0.66282), 
                                            (-0.37117, 0.00000, 0.66282), (0.00000, 0.00000, 0.99422), (0.00000, 0.00000, 0.99422), 
                                            (0.37117, 0.00000, 0.66282), (0.20288, 0.00000, 0.66282), (0.20288, 0.00000, 0.45242), 
                                            (0.24088, 0.00000, 0.43816), (0.26792, 0.00000, 0.42217), (0.29390, 0.00000, 0.40451), 
                                            (0.31871, 0.00000, 0.38526), (0.34228, 0.00000, 0.36449), (0.36449, 0.00000, 0.34228), 
                                            (0.38526, 0.00000, 0.31871), (0.40451, 0.00000, 0.29390), (0.42217, 0.00000, 0.26792), 
                                            (0.43816, 0.00000, 0.24088), (0.45242, 0.00000, 0.20288), (0.66282, 0.00000, 0.20288), 
                                            (0.66282, 0.00000, 0.37117), (0.99422, 0.00000, 0.00000), (0.66282, 0.00000, -0.37117), 
                                            (0.66282, 0.00000, -0.20288), (0.45242, 0.00000, -0.20288), (0.43816, 0.00000, -0.24088), 
                                            (0.42217, 0.00000, -0.26792), (0.40451, 0.00000, -0.29390), (0.38526, 0.00000, -0.31871), 
                                            (0.36449, 0.00000, -0.34228), (0.34228, 0.00000, -0.36449), (0.31871, 0.00000, -0.38526), 
                                            (0.29390, 0.00000, -0.40451), (0.26792, 0.00000, -0.42217), (0.24088, 0.00000, -0.43816), 
                                            (0.20288, 0.00000, -0.45242), (0.20288, 0.00000, -0.66282), (0.37117, 0.00000, -0.66282), 
                                            (0.00000, 0.00000, -0.99422)]

        self.hand = [(0.29611, 0.00000, 0.40168), (0.41653, 0.00000, 0.42995), (0.65526, 0.00000, 0.49612), 
                    (0.90801, 0.00000, 0.58122), (1.02407, 0.00000, 0.60391), (1.12982, 0.00000, 0.59824), 
                    (1.21751, 0.00000, 0.56987), (1.28199, 0.00000, 0.51030), (1.31014, 0.00000, 0.43368), 
                    (1.28972, 0.00000, 0.35144), (1.25104, 0.00000, 0.29187), (1.16987, 0.00000, 0.22739), 
                    (1.05297, 0.00000, 0.18677), (0.92964, 0.00000, 0.17393), (0.68197, 0.00000, 0.16040), 
                    (0.56546, 0.00000, 0.14865), (0.50567, 0.00000, 0.13017), (0.45652, 0.00000, 0.08362), 
                    (0.47730, 0.00000, 0.03372), (0.52862, 0.00000, -0.00509), (0.65181, 0.00000, -0.01850), 
                    (0.89730, 0.00000, -0.00892), (1.14310, 0.00000, -0.00233), (1.26235, 0.00000, -0.03507), 
                    (1.33357, 0.00000, -0.07692), (1.38773, 0.00000, -0.15351), (1.40752, 0.00000, -0.23321), 
                    (1.38773, 0.00000, -0.29251), (1.34344, 0.00000, -0.34572), (1.29230, 0.00000, -0.37762), 
                    (1.23171, 0.00000, -0.39869), (1.10876, 0.00000, -0.40680), (0.86731, 0.00000, -0.35328), 
                    (0.62748, 0.00000, -0.28635), (0.51091, 0.00000, -0.25927), (0.44893, 0.00000, -0.26415), 
                    (0.39770, 0.00000, -0.28952), (0.41540, 0.00000, -0.34925), (0.46135, 0.00000, -0.39696), 
                    (0.68351, 0.00000, -0.50703), (0.80299, 0.00000, -0.53712), (0.91454, 0.00000, -0.59363), 
                    (0.97765, 0.00000, -0.64428), (1.01118, 0.00000, -0.72654), (1.00737, 0.00000, -0.81794), 
                    (0.96217, 0.00000, -0.85987), (0.90026, 0.00000, -0.88202), (0.78046, 0.00000, -0.87049), 
                    (0.66750, 0.00000, -0.81435), (0.44899, 0.00000, -0.69079), (0.21057, 0.00000, -0.62489), 
                    (-0.15576, 0.00000, -0.57296), (-0.39193, -0.00000, -0.49896), (-0.49576, -0.00000, -0.42664), 
                    (-0.58008, -0.00000, -0.32821), (-0.64257, -0.00000, -0.21174), (-0.68221, -0.00000, -0.08369), 
                    (-0.69649, -0.00000, 0.05060), (-0.67995, -0.00000, 0.18453), (-0.63208, -0.00000, 0.30902), 
                    (-0.55958, -0.00000, 0.41830), (-0.37290, -0.00000, 0.59402), (-0.15427, -0.00000, 0.71777), 
                    (-0.03876, -0.00000, 0.76347), (0.06728, -0.00000, 0.83144), (0.13528, -0.00000, 0.94362), 
                    (0.19374, -0.00000, 1.06281), (0.28324, -0.00000, 1.15408), (0.34834, -0.00000, 1.18829), 
                    (0.42056, -0.00000, 1.19964), (0.47730, -0.00000, 1.18262), (0.53404, -0.00000, 1.13440), 
                    (0.55725, 0.00000, 1.04929), (0.55467, 0.00000, 0.97553), (0.53872, 0.00000, 0.90109), 
                    (0.47213, 0.00000, 0.78809), (0.38283, 0.00000, 0.69288), (0.28803, -0.00000, 0.61072), 
                    (0.23228, -0.00000, 0.55853), (0.21941, -0.00000, 0.50354), (0.24776, 0.00000, 0.43938), 
                    (0.29611, 0.00000, 0.40168)]

        self.gear = [(0.80395, 0.00000, -0.59795), (0.63795, 0.00000, -0.43089), (0.63682, 0.00000, -0.41952), 
                    (0.66968, 0.00000, -0.36983), (0.67660, 0.00000, -0.35687), (0.70012, 0.00000, -0.30056), 
                    (0.70581, 0.00000, -0.28696), (0.72934, 0.00000, -0.23066), (0.73370, 0.00000, -0.21663), 
                    (0.74596, 0.00000, -0.15834), (0.75485, 0.00000, -0.15115), (0.99036, 0.00000, -0.15188), 
                    (0.99776, 0.00000, -0.14454), (0.99864, 0.00000, 0.13828), (0.99129, 0.00000, 0.14567), 
                    (0.75578, 0.00000, 0.14640), (0.74694, 0.00000, 0.15366), (0.73504, 0.00000, 0.21203), 
                    (0.73077, 0.00000, 0.22607), (0.70760, 0.00000, 0.28253), (0.70200, 0.00000, 0.29617), 
                    (0.67882, 0.00000, 0.35263), (0.67199, 0.00000, 0.36562), (0.63943, 0.00000, 0.41551), 
                    (0.64064, 0.00000, 0.42689), (0.80769, 0.00000, 0.59289), (0.80772, 0.00000, 0.60333), 
                    (0.60837, 0.00000, 0.80392), (0.59795, 0.00000, 0.80395), (0.43089, 0.00000, 0.63795), 
                    (0.41952, 0.00000, 0.63682), (0.36983, 0.00000, 0.66968), (0.35687, 0.00000, 0.67660), 
                    (0.30056, 0.00000, 0.70012), (0.28696, 0.00000, 0.70581), (0.23066, 0.00000, 0.72934), 
                    (0.21663, 0.00000, 0.73370), (0.15834, 0.00000, 0.74596), (0.15115, 0.00000, 0.75485), 
                    (0.15188, 0.00000, 0.99036), (0.14453, 0.00000, 0.99776), (-0.13828, 0.00000, 0.99864), 
                    (-0.14567, 0.00000, 0.99129), (-0.14640, 0.00000, 0.75578), (-0.15366, 0.00000, 0.74694), 
                    (-0.21203, 0.00000, 0.73504), (-0.22607, 0.00000, 0.73077), (-0.28253, 0.00000, 0.70760), 
                    (-0.29617, 0.00000, 0.70200), (-0.35263, 0.00000, 0.67882), (-0.36562, 0.00000, 0.67199), 
                    (-0.41551, 0.00000, 0.63943), (-0.42689, 0.00000, 0.64064), (-0.59289, 0.00000, 0.80769), 
                    (-0.60333, 0.00000, 0.80772), (-0.80392, 0.00000, 0.60837), (-0.80395, 0.00000, 0.59795), 
                    (-0.63795, 0.00000, 0.43089), (-0.63682, 0.00000, 0.41952), (-0.66968, 0.00000, 0.36983), 
                    (-0.67660, 0.00000, 0.35687), (-0.70012, 0.00000, 0.30056), (-0.70581, 0.00000, 0.28696), 
                    (-0.72934, 0.00000, 0.23066), (-0.73370, 0.00000, 0.21663), (-0.74596, 0.00000, 0.15834), 
                    (-0.75485, 0.00000, 0.15114), (-0.99036, 0.00000, 0.15188), (-0.99776, 0.00000, 0.14453), 
                    (-0.99864, 0.00000, -0.13828), (-0.99129, 0.00000, -0.14567), (-0.75578, 0.00000, -0.14640), 
                    (-0.74694, 0.00000, -0.15366), (-0.73504, 0.00000, -0.21203), (-0.73077, 0.00000, -0.22607), 
                    (-0.70760, 0.00000, -0.28253), (-0.70200, 0.00000, -0.29617), (-0.67882, 0.00000, -0.35263), 
                    (-0.67199, 0.00000, -0.36562), (-0.63943, 0.00000, -0.41551), (-0.64064, 0.00000, -0.42689), 
                    (-0.80769, 0.00000, -0.59289), (-0.80772, 0.00000, -0.60333), (-0.60837, 0.00000, -0.80392), 
                    (-0.59795, 0.00000, -0.80395), (-0.43089, 0.00000, -0.63795), (-0.41952, 0.00000, -0.63682), 
                    (-0.36983, 0.00000, -0.66968), (-0.35687, 0.00000, -0.67660), (-0.30056, 0.00000, -0.70012), 
                    (-0.28696, 0.00000, -0.70581), (-0.23066, 0.00000, -0.72934), (-0.21663, 0.00000, -0.73370), 
                    (-0.15834, 0.00000, -0.74596), (-0.15114, 0.00000, -0.75485), (-0.15188, 0.00000, -0.99036), 
                    (-0.14453, 0.00000, -0.99776), (0.13828, 0.00000, -0.99864), (0.14567, 0.00000, -0.99129), 
                    (0.14640, 0.00000, -0.75578), (0.15366, 0.00000, -0.74694), (0.21203, 0.00000, -0.73504), 
                    (0.22607, 0.00000, -0.73077), (0.28253, 0.00000, -0.70760), (0.29617, 0.00000, -0.70200), 
                    (0.35263, 0.00000, -0.67882), (0.36562, 0.00000, -0.67199), (0.41551, 0.00000, -0.63943), 
                    (0.42689, 0.00000, -0.64064), (0.59289, 0.00000, -0.80769), (0.60333, 0.00000, -0.80772), 
                    (0.80392, 0.00000, -0.60837)]

        self.teethShape = [(0.00000, -0.00000, 0.08813), (0.03372, 0.00000, 0.08142), (0.06231, 0.00000, 0.06231), 
                    (0.08142, 0.00000, 0.03372), (0.08813, -0.00000, 0.00000), (0.08142, -0.00000, -0.03372), 
                    (0.06231, -0.00000, -0.06231), (0.03372, -0.00000, -0.08142), (0.00000, -0.00000, -0.08813), 
                    (-0.03372, -0.00000, -0.08142), (-0.06231, -0.00000, -0.06231), (-0.08142, -0.00000, -0.03372), 
                    (-0.08813, -0.00000, 0.00000), (-0.08142, 0.00000, 0.03372), (-0.06231, 0.00000, 0.06231), 
                    (-0.03372, 0.00000, 0.08142), (0.00000, -0.00000, 0.08813), (0.00000, 0.00000, 0.37544), 
                    (0.00000, 0.00000, 0.37007), (0.00000, 0.01458, 0.36717), (0.00000, 0.02694, 0.35891), 
                    (0.00000, 0.03520, 0.34655), (0.00000, 0.03810, 0.33197), (0.00000, 0.04407, 0.33197), 
                    (0.00000, 0.03810, 0.33197), (0.00000, 0.03520, 0.31739), (0.00000, 0.02694, 0.30503), 
                    (0.00000, 0.01458, 0.29677), (0.00000, 0.00000, 0.29387), (0.00000, 0.00000, 0.29387), 
                    (0.00000, -0.01458, 0.29677), (0.00000, -0.02694, 0.30503), (0.00000, -0.03520, 0.31739), 
                    (0.00000, -0.03810, 0.33197), (0.00000, -0.04407, 0.33197), (0.00000, -0.03810, 0.33197), 
                    (0.00000, -0.03520, 0.34655), (0.00000, -0.02694, 0.35891), (0.00000, -0.01458, 0.36717), 
                    (0.00000, 0.00000, 0.37007), (-0.01458, 0.00000, 0.36717), (-0.02694, 0.00000, 0.35891), 
                    (-0.03520, 0.00000, 0.34655), (-0.03810, 0.00000, 0.33197), (-0.04407, 0.00000, 0.33197), 
                    (-0.03810, 0.00000, 0.33197), (-0.03520, 0.00000, 0.31739), (-0.02694, 0.00000, 0.30503), 
                    (-0.01458, 0.00000, 0.29677), (0.00000, 0.00000, 0.29387), (0.01458, 0.00000, 0.29677), 
                    (0.02694, 0.00000, 0.30503), (0.03520, 0.00000, 0.31739), (0.03810, 0.00000, 0.33197), 
                    (0.04407, 0.00000, 0.33197), (0.03810, 0.00000, 0.33197), (0.03520, 0.01458, 0.33197), 
                    (0.02694, 0.02694, 0.33197), (0.01458, 0.03520, 0.33197), (0.00000, 0.03810, 0.33197), 
                    (-0.01458, 0.03520, 0.33197), (-0.02694, 0.02694, 0.33197), (-0.03520, 0.01458, 0.33197), 
                    (-0.03810, 0.00000, 0.33197), (-0.03520, -0.01458, 0.33197), (-0.02694, -0.02694, 0.33197), 
                    (-0.01458, -0.03520, 0.33197), (0.00000, -0.03810, 0.33197), (0.01458, -0.03520, 0.33197), 
                    (0.02694, -0.02694, 0.33197), (0.03520, -0.01458, 0.33197), (0.03810, 0.00000, 0.33197), 
                    (0.03520, 0.00000, 0.34655), (0.02694, 0.00000, 0.35891), (0.01458, 0.00000, 0.36717), 
                    (0.00000, 0.00000, 0.37007), (0.00000, 0.00000, 0.33197), (0.00000, 0.00000, 0.29387), 
                    (0.00000, 0.00000, 0.33197), (0.03810, 0.00000, 0.33197), (0.00000, 0.00000, 0.33197), 
                    (-0.03810, 0.00000, 0.33197), (0.00000, 0.00000, 0.33197), (0.00000, -0.03810, 0.33197), 
                    (0.00000, 0.00000, 0.33197), (0.00000, 0.03810, 0.33197)]
class ControllerAbstract(object):
    def __init__(self):
        pass

    def setColor(self, color):
        if not self.getShape():
            return False

        shp = self.getShape()
        try:
            shp.overrideEnabled.set(True)
            shp.overrideColor.set(misc.getColorCode(color))
        except:
            return False

        return True

    @classmethod
    def from_name(cls, obj):
        return cls(node=obj)

    def lockAttr(self, t=False, r=False, s=False, v=True):
        misc.lockAttr(self, lock=True, t=t, r=r, s=s, v=v)

    def hideAttr(self, t=False, r=False, s=False, v=True):
        misc.hideAttr(self, hide=True, t=t, r=r, s=s, v=v)

    def addGimbal(self, scale=1.25):
        ctrlName = self.name()
        gimbalName = ''
        # if naming.CTRL in ctrlName:
        elems = misc.nameSplit(ctrlName)
        # gimbalName = ctrlName.replace('_ctrl', '_gmblCtrl')
        # gimbalName = '%sGimbal%s_%s' %(elems['elem'], elems['pos'], elems['typ'])
        gimbalName = naming.NAME('%s%s' %(elems['elem'], naming.GIMBAL), elems['pos'], elems['typ'])
        # else:
            # gimbalName = '%s_gmblCtrl' %ctrlName

        ctrlShp = self.getShape()

        gimbalCtrl = pm.duplicate(self)[0]
        gimbalCtrl.rename(gimbalName)
        gimbalShp = gimbalCtrl.getShape()

        children = gimbalCtrl.getChildren(type='transform')
        if children:
            pm.delete(children)

        bbCenter = pm.objectCenter(gimbalShp, gl=True)
        pm.scale(gimbalCtrl.cv[0:gimbalCtrl.numCVs()-1], [scale, scale, scale], p=bbCenter, r=True)
        gimbalCtrl.setColor('white')
        pm.parent(gimbalCtrl, self)

        gimbalVisAttr = misc.addNumAttr(ctrlShp, 'gimbalControl', 'long', min=0, max=1)
        gimbalVisAttr.setKeyable(False)
        gimbalVisAttr.showInChannelBox(True)

        pm.connectAttr(gimbalVisAttr, gimbalShp.visibility, f=True)
        gimbalCtrl.visibility.lock()
        gimbalCtrl.visibility.setKeyable(False)
        gimbalCtrl.visibility.showInChannelBox(False)

        return gimbalCtrl

    def redraw(self, shapeType):
        # get old shape
        selfShp = self.getShape(ni=True)
        if not shapeType and selfShp:
            pm.delete(selfShp)
            return

        tmpCrv = drawCurve(shapeType=shapeType, name='tmp_crv01')
        tmpCrv = pm.PyNode(tmpCrv)
        tmpShp = tmpCrv.getShape(ni=True)
  
        
        if selfShp:
            oldShapeName = selfShp.nodeName()
            pm.connectAttr(tmpShp.worldSpace, selfShp.create, f=True)
        else:
            pm.parent(tmpShp, self, r=True, s=True)

        oldGimbal = misc.getGimbalCtrl(self)
        if oldGimbal:
            gimbalShp = oldGimbal.getShape(ni=True)
            pm.connectAttr(tmpShp.worldSpace, gimbalShp.create, f=True)
            misc.scaleCtrlVtx(inc=True, percent=25.00, obj=oldGimbal)
        pm.refresh(f=True)
        pm.delete(tmpCrv)

# --- NURBS curve controller class
class CurveController(pm.nodetypes.Transform, ControllerAbstract):

    NODE_TYPE = "Controller"

    @classmethod
    def list(cls, *args, **kwargs):
        kwargs['type'] = cls.__melnode__
        return [node for node in pm.ls(*args, **kwargs) if isinstance(node, cls)]

    @classmethod
    def _isVirtual(cls, obj, name):
        fn = pm.api.MFnDependencyNode(obj)
        try:
            if fn.hasAttribute(NODE_TYPE_ATTR_NAME):
                plug = fn.findPlug(NODE_TYPE_ATTR_NAME)
                if plug.asString() == cls.NODE_TYPE:
                    return True
                return False
        except:
            pass
        return False

    @classmethod
    def _preCreateVirtual(cls, 
                        node='',
                        shapeType=DEFAULT_SHAPE_TYPE, 
                        scale = DEFAULT_SCALE, 
                        color = DEFAULT_COLOR, 
                        axis=DEFAULT_AXIS, 
                        draw=True,
                        **kwargs):

        # --- get name
        if 'n' in kwargs:
            name = kwargs.get('n')
        elif 'name' in kwargs:
            name = kwargs.get('name')
        elif 'n' not in kwargs:
            # if no name is passed, then use the joint Id as the name.
            name = cls.NODE_TYPE

        if node:
            shapeType = ''
        else:
            # --- get shapeType
            if 'st' in kwargs:
                shapeType = kwargs.get('st')
            elif 'shapeType' in kwargs:
                shapeType = kwargs.get('shapeType')

        # adding needed args to postKwargs to pass to _postCreateVirtual
        kwargs['name'] = name
        kwargs['node'] = node
        kwargs['shapeType'] = shapeType
        kwargs['draw'] = draw

        postKwargs = {}
        postKwargs['node'] = node
        postKwargs['shapeType'] = shapeType
        postKwargs['scale'] = scale
        postKwargs['color'] = color
        postKwargs['axis'] = axis
        postKwargs['draw'] = draw

        # returns kwargs to _createVirtual, postKwargs to _postCreateVirtual
        # print kwargs, postKwargs
        return kwargs, postKwargs

    @classmethod
    def _createVirtual(cls, **kwargs):
        # turn kwargs into variables
        node = kwargs.get('node')
        shapeType = kwargs.get('shapeType')
        draw = kwargs.get('draw')
        if not node:
            name = kwargs.get('name')
            
            node = drawCurve(shapeType, name)

        elif draw and shapeType:
            # create temp curve and parent its shape to the new joint
            crv = drawCurve(shapeType, 'tmp_crv')
            crvShp = mc.listRelatives(crv, s=True, f=True)[0]
            mc.parent(crvShp, node, r=True, s=True)
            mc.delete(crv)
        # print node, type(node)
        return node

    @classmethod
    def _postCreateVirtual(cls, curveName, **postKwargs):
        # transform is string from _createVirtual,  have to re-cast
        transform = pm.PyNode(curveName)

        ntAttr = misc.addStrAttr(transform, NODE_TYPE_ATTR_NAME)
        # ntAttr.unlock()
        ntAttr.set(cls.NODE_TYPE)
        # ntAttr.lock()

        if postKwargs.get('node'):
            return 

        # rename shape node
        shp = transform.getShape()
        shp.rename('%sShape' %transform.nodeName().split(':')[-1])
        # delete history, freeze transform on the new node
        pm.delete(transform, ch=True)
        pm.makeIdentity(transform, a=True, t=True, r=True, s=True)

        # set color
        color = postKwargs.get('color')
        shp.overrideEnabled.set(True)
        shp.overrideColor.set(misc.getColorCode(color))

        # set scale
        scale = postKwargs.get('scale')
        numCvs = transform.numCVs()
        allCvs = pm.PyNode('%s.cv[%s:%s]' %(shp.longName(), 0, numCvs-1))
        pm.scale(allCvs, scale, scale, scale, os=True, r=True)

        # set axis
        axis = postKwargs.get('axis')
        if axis in ('+y', 'y'):
            pm.rotate(allCvs, [0,0,0], r=True, os=True)
        elif axis == '-y':
            pm.rotate(allCvs, [180,0,0], r=True, os=True)

        elif axis in ('+x', 'x'):
            pm.rotate(allCvs, [0,0,-90], r=True, os=True)
        elif axis == '-x':
            pm.rotate(allCvs, [0,0,90], r=True, os=True)

        elif axis in ('+z', 'z'):
            pm.rotate(allCvs, [90,0,0], r=True, os=True)
        elif axis == '-z':
            pm.rotate(allCvs, [-90,0,0], r=True, os=True)

pm.internal.factories.registerVirtualClass(CurveController, nameRequired=False)
Controller = CurveController  # need to rename the class since Maya2018 has added "controller" type node

# --- Joint controller class
class JointController(pm.nodetypes.Joint, ControllerAbstract):

    NODE_TYPE = "JointController"

    @classmethod
    def list(cls, *args, **kwargs):
        kwargs['type'] = cls.__melnode__
        return [node for node in pm.ls(*args, **kwargs) if isinstance(node, cls)]

    @classmethod
    def _isVirtual(cls, obj, name):
        fn = pm.api.MFnDependencyNode(obj)
        try:
            if fn.hasAttribute(NODE_TYPE_ATTR_NAME):
                plug = fn.findPlug(NODE_TYPE_ATTR_NAME)
                if plug.asString() == cls.NODE_TYPE:
                    return True
                return False
        except:
            pass
        return False

    @classmethod
    def _preCreateVirtual(cls,
                        node='',
                        shapeType=DEFAULT_SHAPE_TYPE, 
                        scale = DEFAULT_SCALE, 
                        color = DEFAULT_COLOR, 
                        axis=DEFAULT_AXIS,
                        draw=False,
                        **kwargs):

        # --- get name
        if 'n' in kwargs:
            name = kwargs.get('n')
        elif 'name' in kwargs:
            name = kwargs.get('name')
        elif 'n' not in kwargs:
            # if no name is passed, then use the joint Id as the name.
            name = cls.NODE_TYPE
        
        if node:
            shapeType = ''
        else:
            # --- get shapeType
            if 'st' in kwargs:
                shapeType = kwargs.get('st')
            elif 'shapeType' in kwargs:
                shapeType = kwargs.get('shapeType')

        kwargs['name'] = name
        kwargs['node'] = node
        kwargs['shapeType'] = shapeType

        # adding needed args to postKwargs to pass to _postCreateVirtual
        postKwargs = {}
        postKwargs['node'] = node
        postKwargs['shapeType'] = shapeType
        postKwargs['scale'] = scale
        postKwargs['color'] = color
        postKwargs['axis'] = axis
        postKwargs['draw'] = draw
        
        # returns kwargs to _createVirtual, postKwargs to _postCreateVirtual
        return kwargs, postKwargs

    @classmethod
    def _createVirtual(cls, **kwargs):
        # turn kwargs into variables
        name = kwargs.get('name')
        shapeType = kwargs.get('shapeType')
        node = kwargs.get('node')
        # print joint
        if not node:
            node = mc.createNode('joint', n=name)
        
            if shapeType:
                # create temp curve and parent its shape to the new joint
                crv = drawCurve(shapeType, 'tmp_crv')
                crvShp = mc.listRelatives(crv, s=True, f=True)[0]
                mc.parent(crvShp, node, r=True, s=True)
                mc.delete(crv)
        return node

    @classmethod
    def _postCreateVirtual(cls, jntName, **kwargs):
        # transform is string from _createVirtual,  have to re-cast
        transform = pm.PyNode(jntName)
        ntAttr = misc.addStrAttr(transform, NODE_TYPE_ATTR_NAME)
        # ntAttr.unlock()
        ntAttr.set(cls.NODE_TYPE)
        # ntAttr.lock()

        node = kwargs.get('node')
        if node:
            return 

        # rename shape
        shp = transform.getShape()
        if not shp:
            return
        shp.rename('%sShape' %transform.nodeName())

        # set color
        color = kwargs.get('color')
        shp.overrideEnabled.set(True)
        shp.overrideColor.set(misc.getColorCode(color))

        # set scale
        scale = kwargs.get('scale')
        numCvs = transform.numCVs()
        allCvs = shp.cv
        pm.scale(allCvs, scale, scale, scale, os=True, r=True)

        # set axis
        axis = kwargs.get('axis')
        if axis in ('+y', 'y'):
            pm.rotate(allCvs, [0,0,0], r=True, os=True)
        elif axis == '-y':
            pm.rotate(allCvs, [180,0,0], r=True, os=True)

        elif axis in ('+x', 'x'):
            pm.rotate(allCvs, [0,0,-90], r=True, os=True)
        elif axis == '-x':
            pm.rotate(allCvs, [0,0,90], r=True, os=True)

        elif axis in ('+z', 'z'):
            pm.rotate(allCvs, [90,0,0], r=True, os=True)
        elif axis == '-z':
            pm.rotate(allCvs, [-90,0,0], r=True, os=True)

        # lock hide radius and set draw stype to none
        try:
            transform.radius.showInChannelBox(False)
        except:
            pass
        # transform.radius.lock()

        draw = kwargs['draw']
        drawStyle = 0
        if not draw:
            drawStyle = 2
        try:  # incase it's not a joint
            transform.drawStyle.set(drawStyle)
        except:
            pass


pm.internal.factories.registerVirtualClass(JointController, nameRequired=False)

# ----------------------------------------
def writeCtrlShape(fn='', searchStr='.*_ctrl$'):
    trs = mc.ls(type='transform', l=True)
    ctrls = []
    for t in trs:
        sn = t.split('|')[-1]
        mre = re.match(searchStr, sn, re.IGNORECASE)
        if mre:
            ctrls.append(t)

    ctrlDct = {}
    for ctrl in ctrls:
        shapes = mc.listRelatives(ctrl, s=True)
        if type(shapes) == type( [] ) and mc.nodeType(shapes[0]) == 'nurbsCurve':
            cv = mc.getAttr('%s.spans' %shapes[0]) + mc.getAttr('%s.degree' %shapes[0])
            for ix in range(0, cv):
                cvName = '%s.cv[%s]' %(shapes[0], str(ix))
                ctrlDct[cvName] = mc.xform(cvName, q=True, os=True, t=True)

            # Write color property
            if mc.getAttr('%s.overrideEnabled'% shapes[0]):
                colVal = mc.getAttr('%s.overrideColor'% shapes[0])
                ctrlDct[shapes[0]] = colVal

    with open(fn, 'w') as fid:
        cPickle.dump(ctrlDct, fid)

def readCtrlShape(fn='', search='', replace='', prefix='', suffix=''):
    if not fn:
        fn = '%s/ctrlShape.pkl' %os.path.dirname(pm.sceneName())
    with open(fn, 'r') as fid:
        ctrlDct = cPickle.load( fid )

    for key in ctrlDct.keys():
        splits = key.split('.')
        obj, vtx = '', ''
        if len(splits) > 1:
            obj = splits[0]
            vtx = '.%s' %splits[1]
        else:
            obj = key
        
        if search:
            obj = obj.replace(search, replace)
        obj = '%s%s%s%s' %(prefix, obj, vtx, suffix)
        
        if mc.objExists(obj):
            if vtx:
                mc.xform(obj, os=True, t=ctrlDct[obj])
            else:
                mc.setAttr('%s.overrideEnabled' %obj, 1)
                mc.setAttr('%s.overrideColor' %obj, ctrlDct[obj])